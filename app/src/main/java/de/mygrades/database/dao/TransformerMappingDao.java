package de.mygrades.database.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import de.mygrades.database.dao.TransformerMapping;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSFORMER_MAPPING".
*/
public class TransformerMappingDao extends AbstractDao<TransformerMapping, Long> {

    public static final String TABLENAME = "TRANSFORMER_MAPPING";

    /**
     * Properties of entity TransformerMapping.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TransformerMappingId = new Property(0, Long.class, "transformerMappingId", true, "TRANSFORMER_MAPPING_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ParseExpression = new Property(2, String.class, "parseExpression", false, "PARSE_EXPRESSION");
        public final static Property ParseType = new Property(3, String.class, "parseType", false, "PARSE_TYPE");
        public final static Property RuleId = new Property(4, long.class, "ruleId", false, "RULE_ID");
    };

    private Query<TransformerMapping> rule_TransformerMappingsQuery;

    public TransformerMappingDao(DaoConfig config) {
        super(config);
    }
    
    public TransformerMappingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSFORMER_MAPPING\" (" + //
                "\"TRANSFORMER_MAPPING_ID\" INTEGER PRIMARY KEY ," + // 0: transformerMappingId
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"PARSE_EXPRESSION\" TEXT," + // 2: parseExpression
                "\"PARSE_TYPE\" TEXT," + // 3: parseType
                "\"RULE_ID\" INTEGER NOT NULL );"); // 4: ruleId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSFORMER_MAPPING\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TransformerMapping entity) {
        stmt.clearBindings();
 
        Long transformerMappingId = entity.getTransformerMappingId();
        if (transformerMappingId != null) {
            stmt.bindLong(1, transformerMappingId);
        }
        stmt.bindString(2, entity.getName());
 
        String parseExpression = entity.getParseExpression();
        if (parseExpression != null) {
            stmt.bindString(3, parseExpression);
        }
 
        String parseType = entity.getParseType();
        if (parseType != null) {
            stmt.bindString(4, parseType);
        }
        stmt.bindLong(5, entity.getRuleId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TransformerMapping readEntity(Cursor cursor, int offset) {
        TransformerMapping entity = new TransformerMapping( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // transformerMappingId
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parseExpression
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // parseType
            cursor.getLong(offset + 4) // ruleId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TransformerMapping entity, int offset) {
        entity.setTransformerMappingId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setParseExpression(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParseType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRuleId(cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TransformerMapping entity, long rowId) {
        entity.setTransformerMappingId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TransformerMapping entity) {
        if(entity != null) {
            return entity.getTransformerMappingId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "transformerMappings" to-many relationship of Rule. */
    public List<TransformerMapping> _queryRule_TransformerMappings(long ruleId) {
        synchronized (this) {
            if (rule_TransformerMappingsQuery == null) {
                QueryBuilder<TransformerMapping> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RuleId.eq(null));
                rule_TransformerMappingsQuery = queryBuilder.build();
            }
        }
        Query<TransformerMapping> query = rule_TransformerMappingsQuery.forCurrentThread();
        query.setParameter(0, ruleId);
        return query.list();
    }

}
