package de.mygrades.database.dao;

import de.mygrades.database.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import android.util.Base64;
import java.io.UnsupportedEncodingException;
// KEEP INCLUDES END
/**
 * Entity mapped to table "GRADE_ENTRY".
 */
public class GradeEntry {

    /** Not-null value. */
    private String name;
    private Double grade;
    private String examId;
    private String semester;
    private String state;
    private Double creditPoints;
    private String annotation;
    private String attempt;
    private String examDate;
    private Integer semesterNumber;
    private String hash;
    private Boolean overviewPossible;
    private Long overviewId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GradeEntryDao myDao;

    private Overview overview;
    private Long overview__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public GradeEntry() {
    }

    public GradeEntry(String hash) {
        this.hash = hash;
    }

    public GradeEntry(String name, Double grade, String examId, String semester, String state, Double creditPoints, String annotation, String attempt, String examDate, Integer semesterNumber, String hash, Boolean overviewPossible, Long overviewId) {
        this.name = name;
        this.grade = grade;
        this.examId = examId;
        this.semester = semester;
        this.state = state;
        this.creditPoints = creditPoints;
        this.annotation = annotation;
        this.attempt = attempt;
        this.examDate = examDate;
        this.semesterNumber = semesterNumber;
        this.hash = hash;
        this.overviewPossible = overviewPossible;
        this.overviewId = overviewId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGradeEntryDao() : null;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Double getGrade() {
        return grade;
    }

    public void setGrade(Double grade) {
        this.grade = grade;
    }

    public String getExamId() {
        return examId;
    }

    public void setExamId(String examId) {
        this.examId = examId;
    }

    public String getSemester() {
        return semester;
    }

    public void setSemester(String semester) {
        this.semester = semester;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public Double getCreditPoints() {
        return creditPoints;
    }

    public void setCreditPoints(Double creditPoints) {
        this.creditPoints = creditPoints;
    }

    public String getAnnotation() {
        return annotation;
    }

    public void setAnnotation(String annotation) {
        this.annotation = annotation;
    }

    public String getAttempt() {
        return attempt;
    }

    public void setAttempt(String attempt) {
        this.attempt = attempt;
    }

    public String getExamDate() {
        return examDate;
    }

    public void setExamDate(String examDate) {
        this.examDate = examDate;
    }

    public Integer getSemesterNumber() {
        return semesterNumber;
    }

    public void setSemesterNumber(Integer semesterNumber) {
        this.semesterNumber = semesterNumber;
    }

    public String getHash() {
        return hash;
    }

    public void setHash(String hash) {
        this.hash = hash;
    }

    public Boolean getOverviewPossible() {
        return overviewPossible;
    }

    public void setOverviewPossible(Boolean overviewPossible) {
        this.overviewPossible = overviewPossible;
    }

    public Long getOverviewId() {
        return overviewId;
    }

    public void setOverviewId(Long overviewId) {
        this.overviewId = overviewId;
    }

    /** To-one relationship, resolved on first access. */
    public Overview getOverview() {
        Long __key = this.overviewId;
        if (overview__resolvedKey == null || !overview__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OverviewDao targetDao = daoSession.getOverviewDao();
            Overview overviewNew = targetDao.load(__key);
            synchronized (this) {
                overview = overviewNew;
            	overview__resolvedKey = __key;
            }
        }
        return overview;
    }

    public void setOverview(Overview overview) {
        synchronized (this) {
            this.overview = overview;
            overviewId = overview == null ? null : overview.getOverviewId();
            overview__resolvedKey = overviewId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    /**
     * The hash is used as the primary key.
     */
    public void updateHash() {
        hash = (examId == null ? "" : examId) +
               (semester == null ? "" : semester) +
               name;

        try {
            byte[] data = hash.getBytes("UTF-8");
            hash = Base64.encodeToString(data, Base64.DEFAULT);
        } catch (UnsupportedEncodingException e) {
            // ignore, normal hash is used
        }
    }

    @Override
    public String toString() {
        return "GradeEntry{" +
                "name='" + name + '\'' +
                ", grade=" + grade +
                ", examId='" + examId + '\'' +
                ", semester='" + semester + '\'' +
                ", state='" + state + '\'' +
                ", creditPoints=" + creditPoints +
                ", annotation='" + annotation + '\'' +
                ", attempt='" + attempt + '\'' +
                ", examDate='" + examDate + '\'' +
                ", semesterNumber=" + semesterNumber +
                ", hash='" + hash + '\'' +
                ", overviewPossible=" + overviewPossible +
                ", overviewId=" + overviewId +
                ", daoSession=" + daoSession +
                ", myDao=" + myDao +
                ", overview=" + overview +
                ", overview__resolvedKey=" + overview__resolvedKey +
                '}';
    }

    // KEEP METHODS END

}
