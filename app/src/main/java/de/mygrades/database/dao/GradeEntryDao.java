package de.mygrades.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.mygrades.database.dao.GradeEntry;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GRADE_ENTRY".
*/
public class GradeEntryDao extends AbstractDao<GradeEntry, Long> {

    public static final String TABLENAME = "GRADE_ENTRY";

    /**
     * Properties of entity GradeEntry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Grade = new Property(2, Double.class, "grade", false, "GRADE");
        public final static Property ExamId = new Property(3, String.class, "examId", false, "EXAM_ID");
        public final static Property Semester = new Property(4, String.class, "semester", false, "SEMESTER");
        public final static Property State = new Property(5, String.class, "state", false, "STATE");
    };


    public GradeEntryDao(DaoConfig config) {
        super(config);
    }
    
    public GradeEntryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GRADE_ENTRY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"GRADE\" REAL," + // 2: grade
                "\"EXAM_ID\" TEXT," + // 3: examId
                "\"SEMESTER\" TEXT NOT NULL ," + // 4: semester
                "\"STATE\" TEXT);"); // 5: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GRADE_ENTRY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GradeEntry entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        Double grade = entity.getGrade();
        if (grade != null) {
            stmt.bindDouble(3, grade);
        }
 
        String examId = entity.getExamId();
        if (examId != null) {
            stmt.bindString(4, examId);
        }
        stmt.bindString(5, entity.getSemester());
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(6, state);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GradeEntry readEntity(Cursor cursor, int offset) {
        GradeEntry entity = new GradeEntry( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // grade
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // examId
            cursor.getString(offset + 4), // semester
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // state
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GradeEntry entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setGrade(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setExamId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSemester(cursor.getString(offset + 4));
        entity.setState(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GradeEntry entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GradeEntry entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
