package dh.mygrades.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OVERVIEW".
*/
public class OverviewDao extends AbstractDao<Overview, Long> {

    public static final String TABLENAME = "OVERVIEW";

    /**
     * Properties of entity Overview.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OverviewId = new Property(0, Long.class, "overviewId", true, "OVERVIEW_ID");
        public final static Property Average = new Property(1, Double.class, "average", false, "AVERAGE");
        public final static Property Participants = new Property(2, Integer.class, "participants", false, "PARTICIPANTS");
        public final static Property Section1 = new Property(3, Integer.class, "section1", false, "SECTION1");
        public final static Property Section2 = new Property(4, Integer.class, "section2", false, "SECTION2");
        public final static Property Section3 = new Property(5, Integer.class, "section3", false, "SECTION3");
        public final static Property Section4 = new Property(6, Integer.class, "section4", false, "SECTION4");
        public final static Property Section5 = new Property(7, Integer.class, "section5", false, "SECTION5");
        public final static Property UserSection = new Property(8, Integer.class, "userSection", false, "USER_SECTION");
        public final static Property GradeEntryHash = new Property(9, String.class, "gradeEntryHash", false, "GRADE_ENTRY_HASH");
    };


    public OverviewDao(DaoConfig config) {
        super(config);
    }
    
    public OverviewDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OVERVIEW\" (" + //
                "\"OVERVIEW_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: overviewId
                "\"AVERAGE\" REAL," + // 1: average
                "\"PARTICIPANTS\" INTEGER," + // 2: participants
                "\"SECTION1\" INTEGER," + // 3: section1
                "\"SECTION2\" INTEGER," + // 4: section2
                "\"SECTION3\" INTEGER," + // 5: section3
                "\"SECTION4\" INTEGER," + // 6: section4
                "\"SECTION5\" INTEGER," + // 7: section5
                "\"USER_SECTION\" INTEGER," + // 8: userSection
                "\"GRADE_ENTRY_HASH\" TEXT);"); // 9: gradeEntryHash
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OVERVIEW\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Overview entity) {
        stmt.clearBindings();
 
        Long overviewId = entity.getOverviewId();
        if (overviewId != null) {
            stmt.bindLong(1, overviewId);
        }
 
        Double average = entity.getAverage();
        if (average != null) {
            stmt.bindDouble(2, average);
        }
 
        Integer participants = entity.getParticipants();
        if (participants != null) {
            stmt.bindLong(3, participants);
        }
 
        Integer section1 = entity.getSection1();
        if (section1 != null) {
            stmt.bindLong(4, section1);
        }
 
        Integer section2 = entity.getSection2();
        if (section2 != null) {
            stmt.bindLong(5, section2);
        }
 
        Integer section3 = entity.getSection3();
        if (section3 != null) {
            stmt.bindLong(6, section3);
        }
 
        Integer section4 = entity.getSection4();
        if (section4 != null) {
            stmt.bindLong(7, section4);
        }
 
        Integer section5 = entity.getSection5();
        if (section5 != null) {
            stmt.bindLong(8, section5);
        }
 
        Integer userSection = entity.getUserSection();
        if (userSection != null) {
            stmt.bindLong(9, userSection);
        }
 
        String gradeEntryHash = entity.getGradeEntryHash();
        if (gradeEntryHash != null) {
            stmt.bindString(10, gradeEntryHash);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Overview readEntity(Cursor cursor, int offset) {
        Overview entity = new Overview( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // overviewId
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // average
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // participants
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // section1
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // section2
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // section3
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // section4
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // section5
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // userSection
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // gradeEntryHash
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Overview entity, int offset) {
        entity.setOverviewId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAverage(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setParticipants(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSection1(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSection2(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSection3(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSection4(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSection5(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setUserSection(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setGradeEntryHash(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Overview entity, long rowId) {
        entity.setOverviewId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Overview entity) {
        if(entity != null) {
            return entity.getOverviewId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
